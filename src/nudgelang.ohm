NudgeLang {
  Program = Prompt*
  Prompt = "prompt" identifier "{" Section* "}"
  Section = MetaSection
          | ContextSection
          | ParamsSection
          | BodySection
          | ConstraintsSection
          | OutputSection
          | HooksSection
          | TechniqueSection

  MetaSection = "meta" "{" MetaField* "}"
  MetaField = identifier ":" Expression ";"

  ContextSection = "context" "{" ContextField* "}"
  ContextField = identifier ":" string ";"

  ParamsSection = "params" "{" ParamDeclaration* "}"
  ParamDeclaration = identifier ":" Type ("=" Expression)? ";"
  Type = BaseType ArrayModifier? OptionalModifier?
  BaseType = "string" | "number" | "boolean"
  ArrayModifier = "[]"
  OptionalModifier = "?"

  BodySection = "body" "{" BodyContent* "}"
  BodyContent = ControlStructure
               | TextBlock
               | CodeBlock
               | ImageBlock
               | UseStatement
               | ExpressionStatement

  TextBlock = "text" BacktickString ";"
  BacktickString = "`" BacktickElement* "`"
  BacktickElement = InterpolationContent  -- interpolation
                  | TextChars             -- text

  TextChars = TextChar+

  TextChar
    = (~("`" | "$") any)+              -- normal
    | "$" (~"{" any)+                  -- dollar

  InterpolationContent = "${" Expression "}"

  CodeBlock = "code" "(" identifier BacktickString ")" ";"

  ImageBlock = "image" "(" string "," string ")" ";"

  ControlStructure = IfStatement | ForLoop
  IfStatement = "if" "(" Expression ")" Block ("else" Block)?
  ForLoop = "for" "(" identifier "of" Expression ")" Block
  Block = "{" BodyContent* "}"

  UseStatement = "use" identifier ("with" "{" ParamAssignment* "}")? ";"
  ParamAssignment = identifier ":" Expression ","?

  ExpressionStatement = Expression ";"

  ConstraintsSection = "constraints" "{" ConstraintField* "}"
  ConstraintField = identifier ":" Expression ";"

  OutputSection = "output" "{" OutputField* "}"
  OutputField = identifier ":" Expression ";"

  HooksSection = "hooks" "{" HookDefinition* "}"
  HookDefinition = identifier "(" identifier ")" Block

  TechniqueSection = "technique" "{" TechniqueDefinition* "}"
  TechniqueDefinition = ChainOfThought
                      | FewShot
                      | ZeroShot
                      | SelfConsistency
                      | TreeOfThoughts
                      | ActivePrompting
                      | ReWOO
                      | ReAct
                      | Reflection
                      | ExpertPrompting
                      | APE
                      | AutoCoT
                      | ART

  ChainOfThought = "chainOfThought" "{" ChainOfThoughtStep* "}"
  ChainOfThoughtStep = "step" "(" string ")" Block

  FewShot = "fewShot" "{" FewShotExample* "}"
  FewShotExample = "example" "{" "input" ":" TextBlock ";" "output" ":" TextBlock ";" "}"

  ZeroShot = "zeroShot" "{" TechniqueField* "}"
  SelfConsistency = "selfConsistency" "{" TechniqueField* "}"
  TreeOfThoughts = "treeOfThoughts" "{" TechniqueField* "}"
  ActivePrompting = "activePrompting" "{" TechniqueField* "}"
  ReWOO = "reWOO" "{" ReWOOComponent* "}"
  ReWOOComponent = identifier Block
  ReAct = "reAct" "{" ReActComponent* "}"
  ReActComponent = identifier Block
  Reflection = "reflection" "{" TechniqueField* "}"
  ExpertPrompting = "expertPrompting" "{" TechniqueField* "}"
  APE = "ape" "{" TechniqueField* "}"
  AutoCoT = "autoCoT" "{" TechniqueField* "}"
  ART = "art" "{" TechniqueField* "}"

  TechniqueField = identifier ":" Expression ";"

  Expression = LogicalOrExpression

  LogicalOrExpression
    = LogicalOrExpression "||" LogicalAndExpression  -- or
    | LogicalAndExpression

  LogicalAndExpression
    = LogicalAndExpression "&&" EqualityExpression  -- and
    | EqualityExpression

  EqualityExpression
    = EqualityExpression ("==" | "!=") RelationalExpression  -- eq
    | RelationalExpression

  RelationalExpression
    = RelationalExpression ("<" | ">" | "<=" | ">=") AdditiveExpression  -- rel
    | AdditiveExpression

  AdditiveExpression
    = AdditiveExpression ("+" | "-") MultiplicativeExpression  -- add
    | MultiplicativeExpression

  MultiplicativeExpression
    = MultiplicativeExpression ("*" | "/" | "%") UnaryExpression  -- mul
    | UnaryExpression

  UnaryExpression
    = ("!" | "-") UnaryExpression  -- unary
    | MemberExpression

  MemberExpression
    = MemberExpression "." identifier  -- member
    | PrimaryExpression

  PrimaryExpression
    = identifier
    | Literal
    | ParenExpression
    | ObjectLiteral
    | ArrayLiteral

  ParenExpression = "(" Expression ")"

  ObjectLiteral = "{" ListOf<PropertyAssignment, ","> "}"
  PropertyAssignment = (identifier | string) ":" Expression

  ArrayLiteral = "[" ListOf<Expression, ","> "]"

  Literal = number | string | trueLiteral | falseLiteral | nullLiteral

  trueLiteral = "true"
  falseLiteral = "false"
  nullLiteral = "null"
  
  identifier = ~keyword (letter | "_") (alnum | "_")*
  keyword = ("prompt" | "meta" | "context" | "params" | "body" | "constraints" | "output" | "hooks" | "technique"
            | "if" | "else" | "for" | "of" | "use" | "with" | "true" | "false" | "null" | "text" | "code" | "image"
            | "let" | "reflection" | "expertPrompting" | "format" | "step" | "example") ~alnum

  number = digit+ ("." digit+)?
  string = "\"" (~"\"" any)* "\""

  space += comment
  comment = lineComment | blockComment
  lineComment = "//" (~"\n" any)* "\n"
  blockComment = "/*" (~"*/" any)* "*/"
}