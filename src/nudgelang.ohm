NudgeLang {
  Program = Prompt*
  Prompt = "prompt" identifier "{" Section* "}"
  Section = MetaSection
          | ContextSection
          | ParamsSection
          | BodySection
          | ConstraintsSection
          | OutputSection
          | HooksSection
          | TechniqueSection

  MetaSection = "meta" "{" MetaField* "}"
  MetaField = identifier ":" Expression ";"

  ContextSection = "context" "{" ContextField* "}"
  ContextField = identifier ":" string ";"

  ParamsSection = "params" "{" ParamDeclaration* "}"
  ParamDeclaration = identifier ":" Type ("=" Expression)? ";"
  Type = "string" | "number" | "boolean" | ArrayType | OptionalType
  ArrayType = Type "[]"
  OptionalType = Type "?"

  BodySection = "body" "{" BodyContent* "}"
  BodyContent = TextBlock
               | CodeBlock
               | ImageBlock
               | ControlStructure
               | UseStatement
               | ExpressionStatement

  TextBlock = "text" BacktickString ";"
  BacktickString = "`" BacktickContent* "`"
  BacktickContent = (InterpolationContent | ~"`" any)+
  InterpolationContent = "${" Expression "}"

  CodeBlock = "code" "(" Language BacktickString ")" ";"
  Language = identifier

  ImageBlock = "image" "(" string "," string ")" ";"

  ControlStructure = IfStatement | ForLoop
  IfStatement = "if" "(" Expression ")" Block ("else" Block)?
  ForLoop = "for" "(" identifier "of" Expression ")" Block
  Block = "{" BodyContent* "}"

  UseStatement = "use" identifier "with" "{" ParamAssignment* "}" ";"
  ParamAssignment = identifier ":" Expression ","?

  ExpressionStatement = Expression ";"

  ConstraintsSection = "constraints" "{" ConstraintField* "}"
  ConstraintField = identifier ":" Expression ";"

  OutputSection = "output" "{" OutputField* "}"
  OutputField = identifier ":" Expression ";"

  HooksSection = "hooks" "{" HookDefinition* "}"
  HookDefinition = identifier "(" identifier ")" Block

  TechniqueSection = "technique" "{" TechniqueDefinition* "}"
  TechniqueDefinition = ChainOfThought
                      | FewShot
                      | ZeroShot
                      | SelfConsistency
                      | TreeOfThoughts
                      | ActivePrompting
                      | ReWOO
                      | ReAct
                      | Reflection
                      | ExpertPrompting
                      | APE
                      | AutoCoT
                      | ART

  ChainOfThought = "chainOfThought" "{" ChainOfThoughtStep* "}"
  ChainOfThoughtStep = "step" "(" string ")" Block

  FewShot = "fewShot" "{" FewShotExample* "}"
  FewShotExample = "example" "{" "input" ":" TextBlock "output" ":" TextBlock "}"

  ZeroShot = "zeroShot" "{" TechniqueField* "}"
  SelfConsistency = "selfConsistency" "{" TechniqueField* "}"
  TreeOfThoughts = "treeOfThoughts" "{" TechniqueField* "}"
  ActivePrompting = "activePrompting" "{" TechniqueField* "}"
  ReWOO = "reWOO" "{" ReWOOComponent* "}"
  ReWOOComponent = identifier "{" TextBlock "}"
  ReAct = "reAct" "{" ReActComponent* "}"
  ReActComponent = identifier "{" TextBlock "}"
  Reflection = "reflection" "{" TechniqueField* "}"
  ExpertPrompting = "expertPrompting" "{" TechniqueField* "}"
  APE = "ape" "{" TechniqueField* "}"
  AutoCoT = "autoCoT" "{" TechniqueField* "}"
  ART = "art" "{" TechniqueField* "}"

  TechniqueField = identifier ":" Expression ";"

  Expression = BinaryExpression
             | UnaryExpression
             | MemberExpression
             | CallExpression
             | Literal
             | identifier
             | ParenExpression
             | ObjectLiteral
             | ArrayLiteral

  BinaryExpression = Expression BinaryOperator Expression
  BinaryOperator = "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||"

  UnaryExpression = UnaryOperator Expression
  UnaryOperator = "!" | "-"

  MemberExpression = PrimaryExpression ("." identifier)*
  PrimaryExpression = CallExpression
                    | identifier
                    | Literal
                    | ParenExpression
                    | ObjectLiteral
                    | ArrayLiteral

  CallExpression = MemberExpression Arguments
  Arguments = "(" ListOf<Expression, ","> ")"

  ParenExpression = "(" Expression ")"

  ObjectLiteral = "{" ListOf<PropertyAssignment, ","> "}"
  PropertyAssignment = (identifier | string) ":" Expression

  ArrayLiteral = "[" ListOf<Expression, ","> "]"

  Literal = number | string | "true" | "false" | "null"

  identifier = ~keyword (letter | "_") (alnum | "_")*
  keyword = "prompt" | "meta" | "context" | "params" | "body" | "constraints" | "output" | "hooks" | "technique"
          | "if" | "else" | "for" | "of" | "use" | "with" | "true" | "false" | "null"

  number = digit+ ("." digit+)?
  string = "\"" (~"\"" any)* "\""

  space += comment
  comment = lineComment | blockComment
  lineComment = "//" (~"\n" any)* "\n"
  blockComment = "/*" (~"*/" any)* "*/"
}