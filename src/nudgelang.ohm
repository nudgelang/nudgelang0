NudgeLang {
  Program = Prompt*
  Prompt = "prompt" identifier "{" Section* "}"
  Section = MetaSection
          | ContextSection
          | ParamsSection
          | BodySection
          | ConstraintsSection
          | OutputSection
          | HooksSection
          | TechniqueSection

  MetaSection = "meta" "{" MetaField* "}"
  MetaField = identifier ":" Expression ";"

  ContextSection = "context" "{" ContextField* "}"
  ContextField = identifier ":" string ";"

  ParamsSection = "params" "{" ParamDeclaration* "}"
  ParamDeclaration = identifier ":" Type ("=" Expression)? ";"
  Type = BaseType ArrayModifier? OptionalModifier?
  BaseType = "string" | "number" | "boolean"
  ArrayModifier = "[]"
  OptionalModifier = "?"

  BodySection = "body" "{" BodyContent* "}"
  BodyContent = ControlStructure
               | TextBlock
               | CodeBlock
               | ImageBlock
               | UseStatement
               | ExpressionStatement

  TextBlock = "text" BacktickString ";"
  BacktickString = "`" BacktickElement* "`"
  BacktickElement = InterpolationContent  -- interpolation
                  | TextContent           -- text
  TextContent = (~("`" | "${") any)+
  InterpolationContent = "${" Expression "}"

  CodeBlock = "code" "(" identifier BacktickString ")" ";"

  ImageBlock = "image" "(" string "," string ")" ";"

  ControlStructure = IfStatement | ForLoop
  IfStatement = "if" "(" Expression ")" Block ElseClause?
  ElseClause = "else" Block
  ForLoop = "for" "(" identifier "of" Expression ")" Block
  Block = "{" BodyContent* "}"

  UseStatement = "use" identifier WithClause? ";"
  WithClause = "with" "{" ParamAssignment* "}"
  ParamAssignment = identifier ":" Expression ","?

  ExpressionStatement = Expression ";"

  ConstraintsSection = "constraints" "{" ConstraintField* "}"
  ConstraintField = identifier ":" Expression ";"

  OutputSection = "output" "{" OutputField* "}"
  OutputField = identifier ":" Expression ";"

  HooksSection = "hooks" "{" HookDefinition* "}"
  HookDefinition = identifier "(" identifier ")" "{" Statement* "}"
  Statement = ReturnStatement | AssignmentStatement | ExpressionStatement
  ReturnStatement = "return" Expression ";"
  AssignmentStatement = Expression "=" Expression ";"

  TechniqueSection = "technique" "{" TechniqueDefinition* "}"
  TechniqueDefinition = ChainOfThought
                      | FewShot
                      | ZeroShot
                      | SelfConsistency
                      | TreeOfThoughts
                      | ActivePrompting
                      | ReWOO
                      | ReAct
                      | Reflection
                      | ExpertPrompting
                      | APE
                      | AutoCoT
                      | ART

  ChainOfThought = "chainOfThought" "{" ChainOfThoughtStep* "}"
  ChainOfThoughtStep = "step" "(" string ")" Block

  FewShot = "fewShot" "{" FewShotExample* "}"
  FewShotExample = "example" "{" "input" ":" TextBlock "output" ":" TextBlock "}"

  ZeroShot = "zeroShot" "{" TechniqueField* "}"
  SelfConsistency = "selfConsistency" "{" TechniqueField* "}"
  TreeOfThoughts = "treeOfThoughts" "{" TechniqueField* "}"
  ActivePrompting = "activePrompting" "{" TechniqueField* "}"
  ReWOO = "reWOO" "{" ReWOOComponent* "}"
  ReWOOComponent = identifier Block
  ReAct = "reAct" "{" ReActComponent* "}"
  ReActComponent = identifier Block
  Reflection = "reflection" "{" TechniqueField* "}"
  ExpertPrompting = "expertPrompting" "{" TechniqueField* "}"
  APE = "ape" "{" TechniqueField* "}"
  AutoCoT = "autoCoT" "{" TechniqueField* "}"
  ART = "art" "{" TechniqueField* "}"

  TechniqueField = identifier ":" Expression ";"

  Expression = LogicalExpression

  LogicalExpression
    = LogicalExpression LogicalOperator ComparisonExpression  -- binary
    | ComparisonExpression

  ComparisonExpression
    = ComparisonExpression ComparisonOperator AdditiveExpression  -- binary
    | AdditiveExpression

  AdditiveExpression
    = AdditiveExpression AdditiveOperator MultiplicativeExpression  -- binary
    | MultiplicativeExpression

  MultiplicativeExpression
    = MultiplicativeExpression MultiplicativeOperator UnaryExpression  -- binary
    | UnaryExpression

  UnaryExpression
    = PrefixOperator UnaryExpression  -- prefix
    | MemberExpression

  MemberExpression
    = MemberExpression "." identifier  -- dot
    | MemberExpression "[" Expression "]"  -- bracket
    | MemberExpression Arguments  -- call
    | PrimaryExpression

  Arguments = "(" ListOf<Expression, ","> ")"

  PrimaryExpression
    = "(" Expression ")"  -- paren
    | number
    | string
    | trueLiteral
    | falseLiteral
    | nullLiteral
    | ObjectLiteral
    | ArrayLiteral
    | identifier

  ObjectLiteral = "{" ListOf<PropertyAssignment, ","> "}"
  PropertyAssignment = (identifier | string) ":" Expression

  ArrayLiteral = "[" ListOf<Expression, ","> "]"

  LogicalOperator = "&&" | "||"
  ComparisonOperator = "==" | "!=" | ">=" | "<=" | ">" | "<"
  AdditiveOperator = "+" | "-"
  MultiplicativeOperator = "*" | "/" | "%"
  PrefixOperator = "!" | "-"

  trueLiteral = "true"
  falseLiteral = "false"
  nullLiteral = "null"

  identifier = ~keyword (letter | "_") (alnum | "_")*
  keyword = ("if" | "else" | "for" | "of" | "use" | "with" | "true" | "false" | "null" | "let") ~alnum

  number = digit+ ("." digit+)?
  string = "\"" (~"\"" any)* "\""

  space += comment
  comment = lineComment | blockComment
  lineComment = "//" (~"\n" any)* ("\n" | end)
  blockComment = "/*" (~"*/" any)* "*/"
}